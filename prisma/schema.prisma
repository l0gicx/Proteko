// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Defines the Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

// Defines your database connection.
// This configuration is specifically for Vercel Postgres.
datasource db {
  provider  = "postgresql"
  // 'url' uses the connection pooler, which is best for your live application on Vercel.
  // CORRECTED: Removed the typo in the variable name below.
  url       = env("POSTGRES_PRISMA_URL")
  // 'directUrl' uses the direct connection, which is required for management tasks
  // like `npx prisma db push` from your local machine.
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// User model: Stores your user information.
// We've added a 'password' field for credentials login and a 'role' field for authorization.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For storing the hashed password
  role          String    @default("USER") // Can be "USER" or "ADMIN"
  accounts      Account[]
  sessions      Session[]
}

// Account model: Required by NextAuth for linking OAuth accounts (like Google, GitHub, etc.).
// It must be included even if you only use email/password login.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model: Required by NextAuth to manage user sessions.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model: Required by NextAuth for email-based (passwordless) sign-in.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}